#!/usr/bin/python3

import requests

import json
import configparser  # useful for .conf files
import sys, os  # sys for die(), os for XDG support

IPECHO_URL = "http://ipecho.net/plain"
BASE_API_URL = "https://api.cloudflare.com/client/v4"
DEFAULT_CONFIG_PATH = os.environ['XDG_CONFIG_DIRS']+"/cf-update/cf.conf"

def die(*s):
	print(*s, file=sys.stderr)
	sys.exit(-1)

class ConfigHandler:
	def __init__(self, filename=None):
		config = configparser.ConfigParser()

		try:
			print("Looking for config file...")
			if not filename:
				if len(sys.argv) > 1:  # argv includes filename as [0]
					filename = sys.argv[1]
				else:
					filename = DEFAULT_CONFIG_PATH

			print("Using config file at ", filename)
			config.read(filename)
		except:
			die('Failed to find the config file')

		try:
			self.cf_email = config['CloudFlare']['email']
			self.cf_token = config['CloudFlare']['token']
			self.domain = config['Hostname']['domain']
			self.hostname = config['Hostname']['hostname']
		except:
			die('Config file is corrupted.')

	@staticmethod
	def get_public_ip():
		""" Basically a curl request """
		ip_request = requests.get(IPECHO_URL)
		return ip_request.text


class CloudFlareAPIConnection:
	def __init__(self, config):
		self.cfg = config
		self.auth_headers =  {
			'X-Auth-Email': self.cfg.cf_email,
			'Authorization': "Bearer {}".format(self.cfg.cf_token),
			'Content-Type': 'application/json'
		}
		print("Found headers: ", self.auth_headers)

	def update(self):
		print("Getting zone id...")
		zone_id = self.get_zone_id(self.cfg.domain)

		print("Getting records...")
		records = self.get_records(zone_id)

		print("Selecting record...")
		record = self.find_hostname_record(records, self.cfg.hostname)

		print("Getting new IP address...")
		new_ip = ConfigHandler.get_public_ip()

		print("Found record ", record, "in between", len(records), "records at zone", zone_id)
		print("Using IP", new_ip)

		self.renew_record(record, new_ip)
		print("Done!")

	def get_zone_id(self, domain):
		zones_url = BASE_API_URL + "/zones"
		data = {'name': domain}

		response = requests.get(zones_url, params=data, headers=self.auth_headers)
		response_json = response.json()

		try:
			result = response_json['result']
			zone_id = result[0]['id']  # taking first, and hopefully only, zone_id
		except:
			die("Could not get zone_id: ",  response_json)

		return zone_id

	def get_records(self, zone_id):
		url = BASE_API_URL + "/zones/" + zone_id + "/dns_records"

		response = requests.get(url, headers=self.auth_headers)
		response_json = response.json()

		try:
			return response_json['result']
		except:
			die("Could not get records in zone: ", response_json)


	def find_hostname_record(self, records, hostname):
		for record in records:
			# print(json.dumps(record, indent=2))
			if record['name'] == hostname:
				return record

	def renew_record(self, record, new_ip):
		assert record is not None

		url = BASE_API_URL + "/zones/" + record['zone_id'] + "/dns_records/" + record['id']
		data = record
		data['content'] = new_ip
		reqdata = bytes(json.dumps(data), 'utf-8')

		response = requests.put(url, params=reqdata, headers=self.auth_headers)
		response_json = response.json()

		try:
			return response_json['result']
		except:
			die("Could not update DNS record, failed with error: " + response_json)


if __name__ == "__main__":
	config = ConfigHandler()
	api_conn = CloudFlareAPIConnection(config)
	api_conn.update()
	
